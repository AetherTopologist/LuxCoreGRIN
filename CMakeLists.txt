################################################################################
# Copyright 1998-2020 by authors (see AUTHORS.txt)
#
#   This file is part of LuxCoreRender.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

MESSAGE(STATUS "CMake version " ${CMAKE_VERSION} " detected")


################################################################################
#
# Check and configure cmake
#
################################################################################

cmake_minimum_required(VERSION 3.25)
cmake_policy(VERSION 3.0)

# Remove the following when the version check is at least 2.8.4
SET(CMAKE_LEGACY_CYGWIN_WIN32 0)

set(supported_build_variants "Debug" "Release")

# Options
OPTION(LUX_DEMOS "Enable to build LuxCore demos" OFF)
OPTION(LUX_CONSOLE "Enable to build luxcoreconsole" OFF)
OPTION(LUX_UI "Enable to build luxcoreui" OFF)
OPTION(LUX_TESTS "Enable to build tests" OFF)

# Detect whether we're using a single config or multi config generator and
# configure it:

unset(CMAKE_CONFIGURATION_TYPES CACHE)

# This boots up the generator:
enable_language(C)
enable_language(CXX)

if (CMAKE_CONFIGURATION_TYPES)

  message(STATUS "Multi-config generator detected")

  # Hard-wire supported configurations:

  set(CMAKE_CONFIGURATION_TYPES
    ${supported_build_variants} CACHE INTERNAL "-" FORCE)
else()
  message(STATUS "Single-config generator detected")

  # For generators like make, cmake needs to know which variant to use
  # so let's have a drop-down selector for it in the GUI:

  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Build configuration")
  set_property(
    CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${supported_build_variants}
  )

  message(STATUS "Using build variant: " ${CMAKE_BUILD_TYPE})

endif()

# The following implicitly boots up the generator, so don't move it up:

project(LuxRays)


################################################################################
#
# Include necessary dependencies
#
################################################################################

# Python
MESSAGE(STATUS "LuxCore - Python_ROOT_DIR: ${Python_ROOT_DIR}")
find_package(Python COMPONENTS Interpreter Development.Module REQUIRED)

message(STATUS "LuxCore - Add dependency targets")
find_package(OpenMP REQUIRED)
find_package(TBB REQUIRED)
find_package(minizip REQUIRED)
find_package(spdlog REQUIRED)
find_package(OpenImageIO REQUIRED)
find_package(PNG REQUIRED)
find_package(OpenColorIO REQUIRED)
find_package(OpenEXR REQUIRED)
find_package(embree REQUIRED)
find_package(Blosc REQUIRED)
find_package(oidn REQUIRED)
find_package(Boost REQUIRED)
find_package(OpenVDB REQUIRED)
find_package(Imath REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(blender-types REQUIRED)
find_package(OpenSubdiv REQUIRED)
find_package(nlohmann_json REQUIRED)
find_package(robin_hood REQUIRED)
find_package(pybind11 CONFIG REQUIRED)

# Bison/Flex
find_package(BISON REQUIRED)
find_package(FLEX REQUIRED)

set(CMAKE_MODULE_PATH
  "${PROJECT_SOURCE_DIR}"
  "${PROJECT_SOURCE_DIR}/cmake"
)

INCLUDE(KernelPreprocess)

# Include embedded dependencies

SET(LuxRays_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include")
include_directories("${LuxRays_INCLUDE_DIR}")

include_directories("${PROJECT_SOURCE_DIR}/deps/cuew/include")
include_directories("${PROJECT_SOURCE_DIR}/deps/clew/include")
include_directories("${PROJECT_SOURCE_DIR}/deps/optix-7.1.0/include")


################################################################################
#
# Build options
#
################################################################################

if (LUXRAYS_DISABLE_OPENCL)
  ADD_DEFINITIONS("-DLUXRAYS_DISABLE_OPENCL")
  # CUDA requires OpenCL support
  ADD_DEFINITIONS("-DLUXRAYS_DISABLE_CUDA")

  message(STATUS "OpenCL and CUDA support: disabled")
else()
  if (LUXRAYS_DISABLE_CUDA)
    ADD_DEFINITIONS("-DLUXRAYS_DISABLE_CUDA")
    message(STATUS "OpenCL support: enabled")
    message(STATUS "CUDA support: disabled")
  else()
    message(STATUS "OpenCL support: enabled")
    message(STATUS "CUDA support: enabled")
  endif()
endif()

if (LUXCORE_DISABLE_OIDN)
  ADD_DEFINITIONS("-DLUXCORE_DISABLE_OIDN")

  message(STATUS "Intel OIDN support: disabled")
else()
  message(STATUS "Intel OIDN support: enabled")
endif()

################################################################################
#
# LuxRays, SLG, LuxCore and PyLuxCoreTools libraries
#
################################################################################

set(CMAKE_CXX_STANDARD 20)
set(GENERATED_DIR "${CMAKE_BINARY_DIR}/generated")
set(GENERATED_INCLUDE_DIR "${GENERATED_DIR}/include")

file(MAKE_DIRECTORY ${GENERATED_INCLUDE_DIR})
include_directories(${GENERATED_INCLUDE_DIR})

add_subdirectory(src/luxrays)
add_subdirectory(src/slg)
add_subdirectory(src/luxcore)
add_subdirectory(src/pyluxcoretools)

################################################################################
#
# Samples
#
################################################################################

if(LUX_DEMOS)
  if((${CMAKE_SYSTEM_NAME} MATCHES "Linux") OR OSX_BUILD_DEMOS OR WIN_BUILD_DEMOS)
    add_subdirectory(samples/luxcoredemo)
    add_subdirectory(samples/luxcorescenedemo)

    if (NOT WIN32 OR NOT BUILD_LUXCORE_DLL)
      # Internal tests can not be compiled on WIN32 with DLL enabled
      add_subdirectory(tests/luxcoreimplserializationdemo)
    endif()
  endif()
endif()

if(LUX_CONSOLE)
  message(STATUS "Compiling luxcoreconsole")
  add_subdirectory(samples/luxcoreconsole)
endif()

if(LUX_UI)
  message(STATUS "Compiling luxcoreui")
  find_package(OpenGL)
  IF (NOT OPENGL_FOUND)
    MESSAGE(FATAL_ERROR "OpenGL not found! Please either install OpenGL or disable LUX_UI.")
  ENDIF()
  add_subdirectory(samples/luxcoreui)
endif()


################################################################################
#
# Tests
#
################################################################################

if(LUX_TESTS)
  add_subdirectory(pyunittests)
endif()
